/*
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 */
static CONST UCHAR blr_table4 [] = {
	 0, (UCHAR) nod_assignment, (UCHAR) nod_list, (UCHAR) nod_dcl_variable, 
/*  4*/	(UCHAR) nod_message, (UCHAR) nod_erase, (UCHAR) nod_for, 
/*  7*/	(UCHAR) nod_for, (UCHAR) nod_if, (UCHAR) nod_loop, 
/* 10*/	(UCHAR) nod_modify, (UCHAR) nod_handler, (UCHAR) nod_receive, 
/* 13*/	(UCHAR) nod_select, (UCHAR) nod_send, (UCHAR) nod_store, 
/* 16*/	 0, (UCHAR) nod_label, (UCHAR) nod_leave, (UCHAR) nod_store, 
/* 20*/	(UCHAR) nod_post, (UCHAR) nod_literal, (UCHAR) nod_dbkey, 
/* 23*/	(UCHAR) nod_field, (UCHAR) nod_field, (UCHAR) nod_argument, 
/* 26*/	(UCHAR) nod_variable, (UCHAR) nod_average, (UCHAR) nod_count, 
/* 29*/	(UCHAR) nod_max, (UCHAR) nod_min, (UCHAR) nod_total, 
/* 32*/	 0,  0, (UCHAR) nod_add, (UCHAR) nod_subtract, (UCHAR) nod_multiply, 
/* 37*/	(UCHAR) nod_divide, (UCHAR) nod_negate, (UCHAR) nod_concatenate, 
/* 40*/	(UCHAR) nod_substr, (UCHAR) nod_argument, (UCHAR) nod_from, 
/* 43*/	(UCHAR) nod_from, (UCHAR) nod_user_name, (UCHAR) nod_null, 
/* 46*/	 0, (UCHAR) nod_eql, (UCHAR) nod_neq, (UCHAR) nod_gtr, 
/* 50*/	(UCHAR) nod_geq, (UCHAR) nod_lss, (UCHAR) nod_leq, 
/* 53*/	(UCHAR) nod_contains, (UCHAR) nod_matches, (UCHAR) nod_starts, 
/* 56*/	(UCHAR) nod_between, (UCHAR) nod_or, (UCHAR) nod_and, 
/* 59*/	(UCHAR) nod_not, (UCHAR) nod_any, (UCHAR) nod_missing, 
/* 62*/	(UCHAR) nod_unique, (UCHAR) nod_like,  0, (UCHAR) nod_stream, 
/* 66*/	(UCHAR) nod_set_index, (UCHAR) nod_rse,  0,  0,  0, 
/* 71*/	 0,  0,  0, (UCHAR) nod_relation, (UCHAR) nod_relation, 
/* 76*/	(UCHAR) nod_union, (UCHAR) nod_map,  0, (UCHAR) nod_aggregate, 
/* 80*/	 0,  0,  0, (UCHAR) nod_agg_count, (UCHAR) nod_agg_max, 
/* 85*/	(UCHAR) nod_agg_min, (UCHAR) nod_agg_total, (UCHAR) nod_agg_average, 
/* 88*/	(UCHAR) nod_argument,  0,  0,  0,  0, (UCHAR) nod_agg_count2, 
/* 94*/	(UCHAR) nod_agg_count_distinct, (UCHAR) nod_agg_total_distinct, 
/* 96*/	(UCHAR) nod_agg_average_distinct,  0,  0,  0, (UCHAR) nod_function, 
/*101*/	(UCHAR) nod_gen_id, (UCHAR) nod_prot_mask, (UCHAR) nod_upcase, 
/*104*/	(UCHAR) nod_lock_state, (UCHAR) nod_value_if, (UCHAR) nod_sleuth, 
/*107*/	(UCHAR) nod_scalar, (UCHAR) nod_like, (UCHAR) nod_bookmark, 
/*110*/	(UCHAR) nod_crack, (UCHAR) nod_force_crack, (UCHAR) nod_seek, 
/*113*/	(UCHAR) nod_find, (UCHAR) nod_lock_relation, (UCHAR) nod_lock_record, 
/*116*/	(UCHAR) nod_set_bookmark, (UCHAR) nod_get_bookmark, 
/*118*/	 0, (UCHAR) nod_rse, (UCHAR) nod_exec_proc, (UCHAR) nod_begin_range, 
/*122*/	(UCHAR) nod_end_range, (UCHAR) nod_delete_range, (UCHAR) nod_procedure, 
/*125*/	(UCHAR) nod_procedure, (UCHAR) nod_exec_proc, (UCHAR) nod_rse, 
/*128*/	(UCHAR) nod_abort, (UCHAR) nod_block, (UCHAR) nod_error_handler, 
/*131*/	(UCHAR) nod_cast, (UCHAR) nod_release_lock, (UCHAR) nod_release_locks, 
/*134*/	(UCHAR) nod_start_savepoint, (UCHAR) nod_end_savepoint, 
/*136*/	(UCHAR) nod_find_dbkey, (UCHAR) nod_range_relation, 
/*138*/	(UCHAR) nod_delete_ranges, (UCHAR) nod_plan, (UCHAR) nod_merge, 
/*141*/	(UCHAR) nod_join, (UCHAR) nod_sequential, (UCHAR) nod_navigational, 
/*144*/	(UCHAR) nod_indices, (UCHAR) nod_retrieve, (UCHAR) nod_relation, 
/*147*/	(UCHAR) nod_relation, (UCHAR) nod_reset_stream, (UCHAR) nod_release_bookmark, 
/*150*/	(UCHAR) nod_set_generator, (UCHAR) nod_ansi_any, (UCHAR) nod_exists, 
/*153*/	(UCHAR) nod_cardinality, (UCHAR) nod_rec_version, (UCHAR) nod_stall, 
/*156*/	(UCHAR) nod_seek_no_warn, (UCHAR) nod_find_dbkey_version, 
/*158*/	(UCHAR) nod_ansi_all, (UCHAR) nod_extract, (UCHAR) nod_current_date, 
/*161*/	(UCHAR) nod_current_timestamp, (UCHAR) nod_current_time, 
/*163*/	 0};
static CONST UCHAR blr_table [] = {
	 0, (UCHAR) nod_assignment, (UCHAR) nod_list, (UCHAR) nod_dcl_variable, 
/*  4*/	(UCHAR) nod_message, (UCHAR) nod_erase, (UCHAR) nod_for, 
/*  7*/	(UCHAR) nod_for, (UCHAR) nod_if, (UCHAR) nod_loop, 
/* 10*/	(UCHAR) nod_modify, (UCHAR) nod_handler, (UCHAR) nod_receive, 
/* 13*/	(UCHAR) nod_select, (UCHAR) nod_send, (UCHAR) nod_store, 
/* 16*/	 0, (UCHAR) nod_label, (UCHAR) nod_leave, (UCHAR) nod_store, 
/* 20*/	(UCHAR) nod_post, (UCHAR) nod_literal, (UCHAR) nod_dbkey, 
/* 23*/	(UCHAR) nod_field, (UCHAR) nod_field, (UCHAR) nod_argument, 
/* 26*/	(UCHAR) nod_variable, (UCHAR) nod_average2, (UCHAR) nod_count, 
/* 29*/	(UCHAR) nod_max, (UCHAR) nod_min, (UCHAR) nod_total2, 
/* 32*/	 0,  0, (UCHAR) nod_add2, (UCHAR) nod_subtract2, (UCHAR) nod_multiply2, 
/* 37*/	(UCHAR) nod_divide2, (UCHAR) nod_negate, (UCHAR) nod_concatenate, 
/* 40*/	(UCHAR) nod_substr, (UCHAR) nod_argument, (UCHAR) nod_from, 
/* 43*/	(UCHAR) nod_from, (UCHAR) nod_user_name, (UCHAR) nod_null, 
/* 46*/	 0, (UCHAR) nod_eql, (UCHAR) nod_neq, (UCHAR) nod_gtr, 
/* 50*/	(UCHAR) nod_geq, (UCHAR) nod_lss, (UCHAR) nod_leq, 
/* 53*/	(UCHAR) nod_contains, (UCHAR) nod_matches, (UCHAR) nod_starts, 
/* 56*/	(UCHAR) nod_between, (UCHAR) nod_or, (UCHAR) nod_and, 
/* 59*/	(UCHAR) nod_not, (UCHAR) nod_any, (UCHAR) nod_missing, 
/* 62*/	(UCHAR) nod_unique, (UCHAR) nod_like,  0, (UCHAR) nod_stream, 
/* 66*/	(UCHAR) nod_set_index, (UCHAR) nod_rse,  0,  0,  0, 
/* 71*/	 0,  0,  0, (UCHAR) nod_relation, (UCHAR) nod_relation, 
/* 76*/	(UCHAR) nod_union, (UCHAR) nod_map,  0, (UCHAR) nod_aggregate, 
/* 80*/	 0,  0,  0, (UCHAR) nod_agg_count, (UCHAR) nod_agg_max, 
/* 85*/	(UCHAR) nod_agg_min, (UCHAR) nod_agg_total2, (UCHAR) nod_agg_average2, 
/* 88*/	(UCHAR) nod_argument,  0,  0,  0,  0, (UCHAR) nod_agg_count2, 
/* 94*/	(UCHAR) nod_agg_count_distinct, (UCHAR) nod_agg_total_distinct2, 
/* 96*/	(UCHAR) nod_agg_average_distinct2,  0,  0,  0, (UCHAR) nod_function, 
/*101*/	(UCHAR) nod_gen_id2, (UCHAR) nod_prot_mask, (UCHAR) nod_upcase, 
/*104*/	(UCHAR) nod_lock_state, (UCHAR) nod_value_if, (UCHAR) nod_sleuth, 
/*107*/	(UCHAR) nod_scalar, (UCHAR) nod_like, (UCHAR) nod_bookmark, 
/*110*/	(UCHAR) nod_crack, (UCHAR) nod_force_crack, (UCHAR) nod_seek, 
/*113*/	(UCHAR) nod_find, (UCHAR) nod_lock_relation, (UCHAR) nod_lock_record, 
/*116*/	(UCHAR) nod_set_bookmark, (UCHAR) nod_get_bookmark, 
/*118*/	 0, (UCHAR) nod_rse, (UCHAR) nod_exec_proc, (UCHAR) nod_begin_range, 
/*122*/	(UCHAR) nod_end_range, (UCHAR) nod_delete_range, (UCHAR) nod_procedure, 
/*125*/	(UCHAR) nod_procedure, (UCHAR) nod_exec_proc, (UCHAR) nod_rse, 
/*128*/	(UCHAR) nod_abort, (UCHAR) nod_block, (UCHAR) nod_error_handler, 
/*131*/	(UCHAR) nod_cast, (UCHAR) nod_release_lock, (UCHAR) nod_release_locks, 
/*134*/	(UCHAR) nod_start_savepoint, (UCHAR) nod_end_savepoint, 
/*136*/	(UCHAR) nod_find_dbkey, (UCHAR) nod_range_relation, 
/*138*/	(UCHAR) nod_delete_ranges, (UCHAR) nod_plan, (UCHAR) nod_merge, 
/*141*/	(UCHAR) nod_join, (UCHAR) nod_sequential, (UCHAR) nod_navigational, 
/*144*/	(UCHAR) nod_indices, (UCHAR) nod_retrieve, (UCHAR) nod_relation, 
/*147*/	(UCHAR) nod_relation, (UCHAR) nod_reset_stream, (UCHAR) nod_release_bookmark, 
/*150*/	(UCHAR) nod_set_generator2, (UCHAR) nod_ansi_any, (UCHAR) nod_exists, 
/*153*/	(UCHAR) nod_cardinality, (UCHAR) nod_rec_version, (UCHAR) nod_stall, 
/*156*/	(UCHAR) nod_seek_no_warn, (UCHAR) nod_find_dbkey_version, 
/*158*/	(UCHAR) nod_ansi_all, (UCHAR) nod_extract, (UCHAR) nod_current_date, 
/*161*/	(UCHAR) nod_current_timestamp, (UCHAR) nod_current_time, 
/*163*/	 0};
static CONST SCHAR length_table [] = {
	 0, e_asgn_length, 0, e_dcl_length, 0, e_erase_length, 
/*  6*/	e_for_length, e_for_length, e_if_length, 1, 0, 1, e_send_length, 
/* 13*/	0, e_send_length, e_sto_length,  0, e_lbl_length, 1, 
/* 19*/	e_sto_length, 1, 0, 1, 0, 0, e_arg_length, e_var_length, 
/* 27*/	e_stat_length, e_stat_length, e_stat_length, e_stat_length, 
/* 31*/	e_stat_length,  0,  0, 2, 2, 2, 2, 1, 2, 3, e_arg_length, 
/* 42*/	e_stat_length, e_stat_length, 1, 1,  0, 2, 2, 2, 2, 
/* 51*/	2, 2, 2, 2, 2, 3, 2, 2, 1, e_any_length, 1, e_any_length, 
/* 63*/	2,  0, 0, e_index_length, 0,  0,  0,  0,  0,  0,  0, 
/* 74*/	0, 0, 0, 0,  0, e_agg_length,  0,  0,  0, 1, 1, 1, 
/* 86*/	1, 1, e_arg_length,  0,  0,  0,  0, 1, 2, 2, 2,  0, 
/* 98*/	 0,  0, 0, e_gen_length, e_pro_length, 1, 1, 3, 3, 
/*107*/	2, 3, e_bookmark_length, 2, 2, e_seek_length, e_find_length, 
/*114*/	e_lockrel_length, e_lockrec_length, e_setmark_length, 
/*117*/	e_getmark_length,  0, 0, e_esp_length, e_brange_length, 
/*122*/	e_erange_length, e_drange_length, e_prc_length, e_prc_length, 
/*126*/	e_esp_length, 0, 1, e_blk_length, e_err_length, e_cast_length, 
/*132*/	e_rellock_length, 0, 1, 1, e_find_dbkey_length, e_range_relation_length, 
/*138*/	0, 1, 0, 0, 0, 1, 1, 2, 0, 0, e_reset_length, e_relmark_length, 
/*150*/	e_gen_length, e_any_length, e_any_length, e_card_length, 
/*154*/	1, 1, e_seek_length, e_find_dbkey_length, e_any_length, 
/*159*/	e_extract_length, e_current_date_length, e_current_timestamp_length, 
/*162*/	e_current_time_length,  0};
static CONST SCHAR count_table [] = {
	 0, 2, 0, 0, 0, 0, 3, 3, 3, 1, 0, 1, 1, 0, 1, e_sto_length - 1, 
/* 16*/	 0, 1, 0, e_sto_length - 1, 1, 0, 0, 0, 0, 0, 0, 2, 
/* 28*/	1, 2, 2, 2,  0,  0, 2, 2, 2, 2, 1, 2, 3, 0, 2, 3, 0, 
/* 45*/	0,  0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 1, 1, 1, 
/* 62*/	1, 2,  0, 0, 1, 0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 
/* 77*/	0,  0, 0,  0,  0,  0, 0, 1, 1, 1, 1, 0,  0,  0,  0, 
/* 92*/	 0, 1, 1, 1, 1,  0,  0,  0, 0, 1, 2, 1, 1, 3, 3, 2, 
/*108*/	3, 1, 0, 0, 2, 3, 2, 1, 1, 0,  0, 0, 4, 1, 1, 1, 2, 
/*125*/	2, 4, 0, 0, e_blk_length, 1, 1, 1, 0, 0, 0, 1, 1, 0, 
/*139*/	1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 
/*156*/	2, 2, 1, e_extract_count, 0, 0, 0,  0};
static CONST SCHAR type_table [] = {
	 0, STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/*  6*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/* 11*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/* 16*/	 0, STATEMENT, STATEMENT, STATEMENT, STATEMENT, VALUE, 
/* 22*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 30*/	VALUE, VALUE,  0,  0, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 39*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE,  0, 
/* 47*/	BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, 
/* 56*/	BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL,  0, 
/* 65*/	STATEMENT, STATEMENT, TYPE_RSE,  0,  0,  0,  0,  0, 
/* 73*/	 0, RELATION, RELATION, RELATION, OTHER,  0, RELATION, 
/* 80*/	 0,  0,  0, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 89*/	 0,  0,  0,  0, VALUE, VALUE, VALUE, VALUE,  0,  0, 
/* 99*/	 0, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, BOOL, 
/*107*/	VALUE, BOOL, VALUE, VALUE, STATEMENT, STATEMENT, STATEMENT, 
/*114*/	VALUE, VALUE, STATEMENT, VALUE,  0, RELATION, STATEMENT, 
/*121*/	VALUE, STATEMENT, STATEMENT, RELATION, RELATION, STATEMENT, 
/*127*/	TYPE_RSE, STATEMENT, STATEMENT, STATEMENT, VALUE, STATEMENT, 
/*133*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, STATEMENT, 
/*138*/	STATEMENT, VALUE, VALUE, VALUE, ACCESS_TYPE, ACCESS_TYPE, 
/*144*/	ACCESS_TYPE, ACCESS_TYPE, RELATION, RELATION, STATEMENT, 
/*149*/	STATEMENT, STATEMENT, BOOL, BOOL, VALUE, VALUE, STATEMENT, 
/*156*/	STATEMENT, STATEMENT, BOOL, VALUE, VALUE, VALUE, VALUE, 
/*163*/	 0};
static CONST SCHAR sub_type_table [] = {
	 0, VALUE, STATEMENT, OTHER, OTHER, OTHER, STATEMENT, 
/*  7*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT, OTHER, 
/* 12*/	STATEMENT, STATEMENT, STATEMENT, STATEMENT,  0, STATEMENT, 
/* 18*/	OTHER, STATEMENT, VALUE, OTHER, VALUE, VALUE, VALUE, 
/* 25*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE,  0, 
/* 33*/	 0, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 41*/	VALUE, OTHER, OTHER, VALUE, VALUE,  0, VALUE, VALUE, 
/* 49*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, 
/* 57*/	BOOL, BOOL, BOOL, TYPE_RSE, VALUE, OTHER, VALUE,  0, 
/* 65*/	STATEMENT, STATEMENT, OTHER,  0,  0,  0,  0,  0,  0, 
/* 74*/	OTHER, OTHER, OTHER, OTHER,  0, OTHER,  0,  0,  0, 
/* 83*/	VALUE, VALUE, VALUE, VALUE, VALUE, VALUE,  0,  0,  0, 
/* 92*/	 0, VALUE, VALUE, VALUE, VALUE,  0,  0,  0, VALUE, 
/*101*/	VALUE, VALUE, VALUE, VALUE, OTHER, VALUE, VALUE, VALUE, 
/*109*/	VALUE, OTHER, OTHER, VALUE, STATEMENT, VALUE, VALUE, 
/*116*/	STATEMENT, VALUE,  0, OTHER, OTHER, OTHER, STATEMENT, 
/*123*/	STATEMENT, OTHER, OTHER, OTHER, OTHER, OTHER, STATEMENT, 
/*130*/	OTHER, VALUE, STATEMENT, STATEMENT, OTHER, OTHER, STATEMENT, 
/*137*/	STATEMENT, STATEMENT, VALUE, VALUE, VALUE, OTHER, VALUE, 
/*144*/	VALUE, VALUE, OTHER, OTHER, OTHER, OTHER, VALUE, TYPE_RSE, 
/*152*/	TYPE_RSE, OTHER, VALUE, STATEMENT, VALUE, STATEMENT, 
/*158*/	TYPE_RSE, VALUE, OTHER, OTHER, OTHER,  0};
