C  The contents of this file are subject to the Interbase Public
C  License Version 1.0 (the "License"); you may not use this file
C  except in compliance with the License. You may obtain a copy
C  of the License at http://www.Inprise.com/IPL.html
C
C  Software distributed under the License is distributed on an
C  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
C  or implied. See the License for the specific language governing
C  rights and limitations under the License.
C
C  The Original Code was created by Inprise Corporation
C  and its predecessors. Portions created by Inprise Corporation are
C  Copyright (C) Inprise Corporation.
C
C  All Rights Reserved.
C  Contributor(s): ______________________________________.
C
C	CENSUS REPORT


	integer setup
C	Include the SQL Communications Area
	EXEC SQL
     		INCLUDE SQLCA

C	Set up to catch SQL errors. Note: this will require that each
C	routine which contains executeable SQL commands to have an
C	error handling section labeled '999'. */
	EXEC SQL
     *		WHENEVER SQLERROR GO TO 999

C	Set up estimated data; if successful then do report
	if (setup(0) .eq. 1) call census_report()

C	Undo estimated census data

	EXEC SQL
     *		ROLLBACK

	stop

C	Output error information
999	call print_error()
	stop
	end

	SUBROUTINE print_error()
C	Print out error message
	write (*,*) 'Data base error, SQLCODE = ', SQLCODE
	return
	end

	INTEGER FUNCTION setup(dummy)
C	Put in estimated data for missing 1960 & 1970 census data.
C	Return 1 if successful, 0 otherwise.

C	Include the SQL Communications Area
	EXEC SQL
     *		INCLUDE SQLCA

C	Set up to catch SQL errors. Note: this will require that each
C	routine which contains executeable SQL commands to have an
C	error handling section labeled '999'. */
	EXEC SQL
     *		WHENEVER SQLERROR GO TO 999

C	Replace missing 1960 census data with estimates */

	EXEC SQL
     *		UPDATE POPULATIONS
     *		SET CENSUS_1960 = 0.3 * (CENSUS_1980 - CENSUS_1950)
     *		WHERE CENSUS_1960 IS NULL

C	Replace missing 1970 census data with estimates

	EXEC SQL
     *		UPDATE POPULATIONS
     *		SET CENSUS_1970 = 0.65 * (CENSUS_1980 - CENSUS_1950)
     *		WHERE CENSUS_1970 IS NULL

        setup = 1
	return

C	Error return
999	call print_error()
	setup = 0
	return
	end

	SUBROUTINE census_report()
C	Declare variables to receive data retrieved by SQL commands
	integer pop_50, pop_60, pop_70, pop_80
	character*25 stname

C	Include the SQL Communications Area
	EXEC SQL
     *		INCLUDE SQLCA

C	Set up to catch SQL errors. Note: this will require that each
C	routine which contains executeable SQL commands to have an
C	error handling section labeled '999'. */
	EXEC SQL
     *		WHENEVER SQLERROR GO TO 999

C	Declare cursor for use in retrieving state/census data
        EXEC SQL
     *		DECLARE C CURSOR FOR
     *		SELECT STATE_NAME, CENSUS_1950, CENSUS_1960,
     *			CENSUS_1970, CENSUS_1980
     *		FROM STATES S, POPULATIONS P
     *		WHERE S.STATE = P.STATE
     *		ORDER S.STATE_NAME

C	Open cursor for use in retrieving state/census data
	EXEC SQL
     *		OPEN C

C	Print report header
        write (*,1001) 'STATE', 'POPULATION'
1001	format (' ',t5,a,t42,a)
	write (*,1002) '1950', '1960', '1970', '1980'
1002	format (' ',t29,a,t41,a,t53,a,t65,a,/)

C	Retrieve first set of state/census data
	EXEC SQL
     *		FETCH C INTO :stname, :pop_50, :pop_60, :pop_70, :pop_80

C	Until end of data stream is reached, print out current set
C	of data and then fetch next set
	do while (SQLCODE .eq. 0)
                write (*,1000) stname, pop_50, pop_60, pop_70, pop_80
1000		format (' ',a25,t26,i9,t38,i9,t50,i9,t62,i9)
C		Retrieve next set of state/census data
		EXEC SQL
     *			FETCH C INTO :stname, :pop_50, :pop_60,
     *				 :pop_70, :pop_80
	end do

C	Close cursor
	EXEC SQL
     *		CLOSE C

	return

C	Error return
999	call print_error()
	return
	end
