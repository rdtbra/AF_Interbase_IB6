C  The contents of this file are subject to the Interbase Public
C  License Version 1.0 (the "License"); you may not use this file
C  except in compliance with the License. You may obtain a copy
C  of the License at http://www.Inprise.com/IPL.html
C
C  Software distributed under the License is distributed on an
C  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
C  or implied. See the License for the specific language governing
C  rights and limitations under the License.
C
C  The Original Code was created by Inprise Corporation
C  and its predecessors. Portions created by Inprise Corporation are
C  Copyright (C) Inprise Corporation.
C
C  All Rights Reserved.
C  Contributor(s): ______________________________________.

      PROGRAM UPDATE_GUIDE


      INTEGER*2         STATE_COUNT
      PARAMETER         (STATE_COUNT = 9)
      CHARACTER*2       STATE_LIST (STATE_COUNT)

C      {  It's time to update and print the tourist information we have 
C      {  for New England and the Pacific Northwest.  This program  
C      {  prints and optionally modifies the tourist information for 
C      {  each state, then creates a database that is a guide to 
C      {  northern us seacoasts. 

      DATABASE ATLAS = FILENAME 'atlas.gdb'
      DATABASE GUIDE = FILENAME 'c_guide.gdb'

      DATA (STATE_LIST(I), I = 1, STATE_COUNT) /
     + 'ME', 'NH', 'MA', 'RI', 'CT', 'OR', 'WA', 'AK', 'XX'/



C      { ************************************** 
C      { *
C      { *   M A I N 
C      { * 
C      { ************************************** 
C      { * 
C      { * Functional description 
C      { * 
C      { * The main routine establishes a list of states from the main 
C      { * atlas database.  Its subroutines allow the user to update 
C      { * guidebook descriptions of those states, and store them in 
C      { * a separate database.
C      { ************************************** }


      READY ATLAS 
      CALL CLEAN_UP (STATE_LIST)
      READY 'nc_guide.gdb' AS GUIDE
      CALL TRANSFER_DATA (STATE_LIST)
      FINISH ATLAS
      FINISH GUIDE
      END




      SUBROUTINE CLEAN_UP (STATES_LIST)

      CHARACTER*2       STATES_LIST (*)
      CHARACTER*40      FILENAME
      CHARACTER*4       CHOICE 
      INTEGER*2         I
      INTEGER*4         UPDATE_TR
      CHARACTER*2       STATE
      INTEGER*4         STAT
      INTEGER*2         STRING_SIZE
      INTEGER*2         STATE_COUNT
      PARAMETER         (STATE_COUNT = 9)

      DATABASE ATLAS = FILENAME 'atlas.gdb' 

C      { **************************************
C      { * 
C      { *    c l e a n _ u p 
C      { * 
C      { **************************************
C      { * 
C      { * Functional description 
C      { * 
C      { * At the users' choice, edit the tourism blob for selected  
C      { * states, load a new one from a named file, or accept text 
C      { * from standard input 
C      { ************************************** 

C      { start a named transaction for update, reserving the necessary 
C      { relations }

      UPDATE_TR = 0
      START_TRANSACTION UPDATE_TR CONCURRENCY READ_WRITE RESERVING
          ATLAS.TOURISM FOR WRITE,
          ATLAS.STATES FOR READ


100   DO 110 I = 1, STATE_COUNT 
      STATE = STATES_LIST (I) 
      FOR (TRANSACTION_HANDLE UPDATE_TR) S IN ATLAS.STATES 
          CROSS T IN ATLAS.TOURISM OVER STATE WITH S.STATE = STATE
      PRINT *, 'Here''s the information on ', S.STATE_NAME
      STRING_SIZE = 9
      CALL BLOB__DISPLAY (T.GUIDEBOOK, ATLAS, UPDATE_TR, 'GUIDEBOOK', 
     +     STRING_SIZE)
      WRITE (*, '(A$)') 'Is this information up to date? (Y/N) '
      READ (*, '(A)')  CHOICE
      IF (CHOICE .NE. 'Y' .AND.  CHOICE .NE. 'y') THEN 
          MODIFY T USING
               WRITE (*, '(A$)')
     + 'Enter F to update from a file, E to edit the description '
               READ (*, '(A)') CHOICE 
               IF (CHOICE .EQ. 'F' .OR. CHOICE .EQ. 'f') THEN
                    WRITE (*, '(A$)') 'Enter full name of input file '
                    READ  (*, '(A)') FILENAME
                    STRING_SIZE =  (INDEX (FILENAME, ' ')) - 1
                    CALL BLOB__LOAD (T.GUIDEBOOK, ATLAS, UPDATE_TR,
     +                     FILENAME, STRING_SIZE)
               ELSE IF (CHOICE .EQ. 'E' .OR. CHOICE .EQ. 'e') THEN
		   STRING_SIZE = LEN ('GUIDEBOOK')
                   CALL BLOB__EDIT (T.GUIDEBOOK, ATLAS, UPDATE_TR,
     +                     'GUIDEBOOK',  STRING_SIZE)
               ELSE
                    WRITE (*, '(A$)')
     +                   'Enter new information from standard input.'
                    WRITE (*, '(A)') 
     +                   'Terminate with a slash ("/") on new line.'
                    CREATE_BLOB NEW IN T.GUIDEBOOK
                    NEW.LENGTH =  LEN (NEW.SEGMENT)
150                 READ (*, '(A)') NEW.SEGMENT
                    IF (NEW.SEGMENT .EQ. '/') GOTO 160
                    PUT_SEGMENT NEW
                    GOTO 150
160                 CONTINUE
                    CLOSE_BLOB NEW
                END IF
            END_MODIFY
      END IF
      END_FOR

110   CONTINUE
      COMMIT UPDATE_TR
      END




      SUBROUTINE TRANSFER_DATA (STATES_LIST)

      CHARACTER*2       STATES_LIST (*)
      INTEGER*2         I
      INTEGER*4         TRANS_TR
      CHARACTER*2       STATE
      INTEGER*2         STATE_COUNT
      PARAMETER         (STATE_COUNT = 9)

      DATABASE ATLAS = FILENAME 'atlas.gdb' 
      DATABASE GUIDE = FILENAME 'c_guide.gdb'



C      { **************************************
C      { *
C      { *   t r a n s f e r _ d a t a
C      { *
C      { **************************************
C      { *
C      { * Functional description
C      { *
C      { * Move the tourism information for selected
C      { * states to the guide_book database.
C      { **************************************}

      TRANS_TR = 0

      START_TRANSACTION TRANS_TR CONCURRENCY READ_WRITE RESERVING
        ATLAS.TOURISM FOR READ,
        GUIDE.TOURISM FOR WRITE

      DO 210 I = 1, STATE_COUNT
        STATE = STATES_LIST (I)
        FOR (TRANSACTION_HANDLE TRANS_TR) S IN ATLAS.STATES 
              CROSS T IN ATLAS.TOURISM OVER STATE WITH S.STATE = STATE
              STORE (TRANSACTION_HANDLE TRANS_TR) NEW IN GUIDE.TOURISM USING
                    NEW.STATE_NAME = S.STATE_NAME
                    NEW.STATE = S.STATE
                    NEW.CITY = T.CITY
                    NEW.ZIP = T.ZIP 

C                   { One way to copy a blob }
                   CREATE_BLOB N_ADDR IN NEW.OFFICE
                   FOR O_ADDR IN T.OFFICE
                        N_ADDR.SEGMENT = O_ADDR.SEGMENT
                        N_ADDR.LENGTH = O_ADDR.LENGTH
                        PUT_SEGMENT N_ADDR
                   END_FOR
                   CLOSE_BLOB N_ADDR

C                   { another way to copy a blob }
                   CALL BLOB__DUMP (T.GUIDEBOOK, ATLAS, TRANS_TR,
     +                 'TEMP.TMP',  GDS__INT2(LEN ('TEMP.TMP')))
                   CALL BLOB__LOAD (NEW.GUIDEBOOK, GUIDE, TRANS_TR,
     +                 'TEMP.TMP',  GDS__INT2(LEN ('TEMP.TMP')))
               END_STORE
        END_FOR
210   CONTINUE
      PREPARE TRANS_TR
           ON_ERROR
                PRINT *, 'Error preparing a multi_database transaction'
                PRINT *, 
     + 'Please manually rollback limbo transactions in GUIDE and ATLAS'
                ROLLBACK TRANS_TR
                RETURN
           END_ERROR


      COMMIT TRANS_TR
        ON_ERROR
                PRINT *,
     +    'Error committing a prepared multi_database transaction'
                PRINT *, 
     +    'Please manually commit limbo transactions in GUIDE and ATLAS'
        END_ERROR
      END

