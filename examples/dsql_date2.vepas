(*******************************************************************)
(*                                                                 *)
(* The contents of this file are subject to the Interbase Public   *)
(* License Version 1.0 (the "License"); you may not use this file  *)
(* except in compliance with the License. You may obtain a copy    *)
(* of the License at http://www.Inprise.com/IPL.html                 *)
(*                                                                 *)
(* Software distributed under the License is distributed on an     *)
(* "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express     *)
(* or implied. See the License for the specific language governing *)
(* rights and limitations under the License.                       *)
(*                                                                 *)
(* The Original Code was created by Inprise Corporation *)
(* and its predecessors. Portions created by Inprise Corporation are     *)
(* Copyright (C) Inprise Corporation. *)
(*                                                                 *)
(* All Rights Reserved.                                            *)
(* Contributor(s): ______________________________________.         *)
(*******************************************************************)

program dsql_date_char (INPUT, OUTPUT);

DATABASE DB = 'atlas.gdb';

EXEC SQL 
    INCLUDE SQLCA;

EXEC SQL 
    WHENEVER SQLERROR GO TO 999

var
    query : packed array [1..61] of char := 'SELECT STATE_NAME,STATEHOOD FROM STATES ORDER BY STATEHOOD';
    new_state_name: [VOLATILE] varying [25] of CHAR;
    new_state_date: [VOLATILE] varying [11] of CHAR;
    flag1, flag2 : [VOLATILE] gds__short;
    loop : integer;
    sqlda1 : sqlda;

label
   999;

begin

    READY;
    START_TRANSACTION;

    sqlda1.sqln := 2;

    EXEC SQL 
        PREPARE Q INTO sqlda1 FROM :query;

    sqlda1.sqlvars[1].sqldata := address(new_state_name);
    sqlda1.sqlvars[1].sqlind  := address(flag1);
    sqlda1.sqlvars[1].sqltype := SQL_VARYING + 1;
    sqlda1.sqlvars[1].sqllen := 25;

(* Manually change the date's default size of eight chars *)

    sqlda1.sqlvars[2].sqldata := address(new_state_date);
    sqlda1.sqlvars[2].sqlind  := address(flag2);
    sqlda1.sqlvars[2].sqltype := SQL_VARYING + 1;
    sqlda1.sqlvars[2].sqllen := 11;

    EXEC SQL 
        DECLARE C CURSOR FOR Q;

    EXEC SQL 
        OPEN C;

    EXEC SQL 
        FETCH C USING DESCRIPTOR sqlda1;

    while (SQLCODE = 0) do
    begin
        write(new_state_name);

        if flag2 >= 0 then 
            writeln(new_state_date)
        else
            writeln('<date missing>');

        EXEC SQL 
            FETCH C USING DESCRIPTOR sqlda1;
    end;            

    EXEC SQL 
        COMMIT RELEASE;

999: if ((SQLCODE <> 0) and (sqlcode <> 100)) then
     begin
       writeln ('Data base error, SQLCODE = ', SQLCODE);
       gds__print_status (gds__status);
       EXEC SQL 
         ROLLBACK RELEASE;
     end;
end.
