# The contents of this file are subject to the Interbase Public
# License Version 1.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy
# of the License at http://www.Inprise.com/IPL.html
#
# Software distributed under the License is distributed on an
# "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
# or implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code was created by Inprise Corporation
# and its predecessors. Portions created by Inprise Corporation are
# Copyright (C) Inprise Corporation.
#
# All Rights Reserved.
# Contributor(s): ______________________________________.
.SUFFIXES: .sl .bin .o .c
.c.o:
	$(CC) -c $(INTL_CFLAGS) $(SWB) $(VERSION_FLAG) $<
.c.bin:
	$(CP) $< $*f.c
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) $*f.c
	$(MV) $*f.o $*.bin
	-$(RM) $*f.c
.c.sl:
	-$(RM) $*.sl
	$(CP) $< $*foo.c
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) $*foo.c
	$(MV) $*foo.o $*.sl
	-$(RM) $*foo.c
	$(INTL_LD_LINE)
	$(CHMOD) $(CHMOD_VAL) $*
	$(MV) $* $(INTL_DEST)
	$(CHMOD_6) $*.sl

INTL_SHLIBS = gdsintl.sl 

# Note: Definition of INTL_OBJECTS & INTL_P_OBJECTS must match sfx.jrd.

INTL_OBJECTS1=	ld.o         cv_narrow.o \
		cs_narrow.o  lc_ascii.o lc_narrow.o lc_latin1.o lc_dos.o \
		cs_unicode.o lc_unicode.o \
		cs_utffss.o \
		cs_big5.o    cv_big5.o   lc_big5.o \
		cs_gb2312.o  cv_gb2312.o lc_gb2312.o \
		cs_jis.o     cv_jis.o    lc_jis.o \
		cs_ksc.o     cv_ksc.o    lc_ksc.o

INTL_OBJECTS2=	ld2.o
INTL_OBJECTS=	$(INTL_OBJECTS1) $(INTL_OBJECTS2)

INTL_P_OBJECTS1= ld.bin         cv_narrow.bin \
		cs_narrow.bin  lc_ascii.bin lc_narrow.bin lc_latin1.bin lc_dos.bin \
		cs_unicode.bin lc_unicode.bin \
		cs_utffss.bin \
		cs_big5.bin    cv_big5.bin   lc_big5.bin \
		cs_gb2312.bin  cv_gb2312.bin lc_gb2312.bin \
		cs_jis.bin     cv_jis.bin    lc_jis.bin \
		cs_ksc.bin     cv_ksc.bin    lc_ksc.bin

INTL_P_OBJECTS2= ld2.bin
INTL_P_OBJECTS=	$(INTL_P_OBJECTS1) $(INTL_P_OBJECTS2)

INTL_DEST=	source/interbase/intl

# Note: This is the list of files included by ldcommon.h,
#	and should be updated when the list changes.

COMMON_INCLUDES =	\
		ldcommon.h \
		charsets.h country_codes.h \
		langdrv.h ld.h undef.h \
		source/jrd/gdsassert.h source/jrd/intl.h \
		source/jrd/intlobj.h source/jrd/jrd.h \
		source/jrd/kanji.h source/jrd/ods.h \
		source/jrd/btr.h

intl:	$(INTL_TARGET)
	-$(RM) intl
	$(TOUCH) intl
	$(CHMOD_6) intl

nointl_objs:
	-$(RM) nointl_objs
	$(QUIET_ECHO) "Intl module not yet ported to $(SYSTEM)"
	$(TOUCH) nointl_objs
	$(CHMOD_6) nointl_objs

intl_objects:	$(INTL_OBJECTS)
	-$(RM) intl_objects
	$(TOUCH) intl_objects
	$(CHMOD_6) intl_objects

intl_p_objs:	$(INTL_P_OBJECTS)
	-$(RM) intl_p_objs
	$(TOUCH) intl_p_objs
	$(CHMOD_6) intl_p_objs

intl_shr_objs:	$(INTL_SHLIBS)
	-$(RM) intl_shr_objs
	$(TOUCH) intl_shr_objs
	$(CHMOD_6) intl_shr_objs

gdsintl.so.0.0:	$(INTL_P_OBJECTS1)
	-$(RM) gdsintl.so.0.0
	ld -assert pure-text -assert nosymbolic $(INTL_P_OBJECTS1) -o gdsintl
	$(MV) gdsintl $(INTL_DEST)
	$(TOUCH) gdsintl.so.0.0
	$(CHMOD_6) gdsintl.so.0.0

gdsintl.sl:	$(INTL_P_OBJECTS1)
	-$(RM) gdsintl.sl
	$(INTL_LD_LINE) $(INTL_P_OBJECTS1) $(INTL_LD_TARGET)
	$(CHMOD) $(CHMOD_VAL) gdsintl
	$(MV) gdsintl $(INTL_DEST)
	$(TOUCH) gdsintl.sl
	$(CHMOD_6) gdsintl.sl

gdsintl.dll:	$(WIN_NT_GDSINTL)
	$(TOUCH) gdsintl.dll

gdsintl_nt_ms.dll: $(INTL_OBJECTS1)
	-$(RM) gdsintl.dll gdsintl.lib
	$(IMPLIB) -out:gds_temp.lib $(INTL_OBJECTS1)
	$(IMPLIB) -out:gdsintl.lib -def:gdsintl.bind gds_temp.lib
	$(LINK) -out:gdsintl.dll -dll -entry:_CRT_INIT$(DLLENTRY) gds_temp.lib gdsintl.exp $(CONLIBSDLL)
	$(RM) gds_temp.lib
	$(RM) gdsintl.exp
	$(MV) gdsintl.dll ..\interbase\bin
	$(RM) gdsintl.dll gdsintl.lib
	$(TOUCH) gdsintl_ms.dll

gdsintl_nt_bc4.dll: $(INTL_OBJECTS1)
	-$(RM) gdsintl.dll gdsintl.lib tmpintl.bind
	sed -e 's/DATA READ WRITE/DATA MULTIPLE/' \
		-e 's/LIBRARY gdsintl/LIBRARY gdsintl INITINSTANCE/' \
		-e 's/ LD_lookup/ _LD_lookup/' gdsintl.bind > tmpintl.bind
	$(LINK) -Tpd -ap -c $(LD_OPTS) -w-inq -x /Lc:\bc4\lib c0d32 \
		ld.o+cv_narrow.o+cs_narrow.o+lc_ascii.o+lc_narrow.o+lc_latin1.o+lc_dos.o+cs_unicode.o+lc_unicode.o+cs_utffss.o+cs_jis.o+cv_jis.o+lc_jis.o+cs_big.o+cs_gb2312.o+cs_ksc.o+cv_big.o+cv_gb2312.o+cv_ksc.o+lc_big.o+lc_gb2312.o+lc_ksc.o,\
		gdsintl.dll,,import32 cw32mt,tmpintl.bind
	implib gdsintl.lib gdsintl.dll
	$(MV) gdsintl.dll ..\interbase\bin
	$(RM) gdsintl.dll gdsintl.lib tmpintl.bind
	$(TOUCH) gdsintl_bc4.dll

gdsintl_os2_bc4.dll: $(INTL_OBJECTS1)
	-$(RM) gdsintl.dll gdsintl.lib tmpintl.bind
	sed -e 's/DATA READ WRITE/DATA MULTIPLE NONSHARED/' \
		-e 's/LIBRARY gdsintl/LIBRARY gdsintl INITINSTANCE/' \
		-e 's/ LD_lookup/ _LD_lookup/' gdsintl.bind > tmpintl.bind
	$(LINK) -Tod -ap -c $(LD_OPTS) -x /Lc:\bcos2\lib c02d \
		ld.o+cv_narrow.o+cs_narrow.o+lc_ascii.o+lc_narrow.o+lc_latin1.o+lc_dos.o+cs_unicode.o+lc_unicode.o+cs_utffss.o+cs_jis.o+cv_jis.o+lc_jis.o+cs_big.o+cs_gb2312.o+cs_ksc.o+cv_big.o+cv_gb2312.o+cv_ksc.o+lc_big.o+lc_gb2312.o+lc_ksc.o,\
		gdsintl.dll,,os2 c2mt,tmpintl.bind
	implib gdsintl.lib gdsintl.dll
	$(MV) gdsintl.dll ..\interbase\bin
	$(RM) gdsintl.dll gdsintl.lib tmpintl.bind
	$(TOUCH) gdsintl_bc4.dll

gdsintl_os2_ibm.dll: $(INTL_OBJECTS1)
	-$(RM) gdsintl.dll gdsintl.lib bindintl.tmp
	sed -e 's/DATA READ WRITE/DATA MULTIPLE NONSHARED/' \
		-e 's/LIBRARY gdsintl/LIBRARY gdsintl INITINSTANCE/' \
		gdsintl.bind > bindintl.tmp
	$(LINK) $(LD_OPTS) \
		ld.o+cv_narrow.o+cs_narrow.o+lc_ascii.o+lc_narrow.o+lc_latin1.o+lc_dos.o+cs_unicode.o+lc_unicode.o+cs_utffss.o+cs_jis.o+cv_jis.o+lc_jis.o+cs_big.o+cs_gb2312.o+cs_ksc.o+cv_big.o+cv_gb2312.o+cv_ksc.o+lc_big.o+lc_gb2312.o+lc_ksc.o,\
		gdsintl.dll,,,bindintl.tmp
	c:\toolkt21\os2bin\implib gdsintl.lib gdsintl.dll
	$(MV) gdsintl.dll ..\interbase\bin
	$(RM) gdsintl.dll gdsintl.lib bindintl.tmp
	$(TOUCH) gdsintl_ibm.dll

# gdsintl.a is used for debugging with INTL_BACKEND set in jrd/intl.c
gdsintl.a:	$(INTL_OBJECTS)
	-$(RM) gdsintl.a
	$(AR) gdsintl.a $(INTL_OBJECTS)
	-ranlib gdsintl.a
	$(CHMOD) $(CHMOD_VAL) gdsintl.a

cs_big5.o:	cs_big5.c	$(COMMON_INCLUDES) \
		cs_big5.h
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_CFLAGS) $(VERSION_FLAG) cs_big5.c
cs_gb2312.o:	cs_gb2312.c	$(COMMON_INCLUDES) \
		cs_gb2312.h
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_CFLAGS) $(VERSION_FLAG) cs_gb2312.c
cs_jis.o:	cs_jis.c	$(COMMON_INCLUDES) \
		cs_jis_0208_1990.h
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_CFLAGS) $(VERSION_FLAG) cs_jis.c
cs_ksc.o:	cs_ksc.c	$(COMMON_INCLUDES) \
		cs_ksc5601.h
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_CFLAGS) $(VERSION_FLAG) cs_ksc.c
cs_narrow.o:	cs_narrow.c	$(COMMON_INCLUDES) \
		cs_437.h cs_850.h cs_852.h cs_857.h cs_860.h \
		cs_861.h cs_863.h cs_865.h cs_cyrl.h cs_latin1.h \
		cs_w1250.h cs_w1251.h cs_w1252.h cs_w1253.h \
		cs_w1254.h cs_next.h
cs_unicode.o:	cs_unicode.c	$(COMMON_INCLUDES)
cs_utffss.o:	cs_utffss.c	$(COMMON_INCLUDES)
cv_big5.o:	cv_big5.c	$(COMMON_INCLUDES)
cv_gb2312.o:	cv_gb2312.c	$(COMMON_INCLUDES)
cv_jis.o:	cv_jis.c	$(COMMON_INCLUDES)
cv_ksc.o:	cv_ksc.c	$(COMMON_INCLUDES)
cv_narrow.o:	cv_narrow.c	$(COMMON_INCLUDES) \
		tx437_865.h tx437_lat1.h tx865_lat1.h
lc_ascii.o:	lc_ascii.c	$(COMMON_INCLUDES)
lc_big5.o:	lc_big5.c	$(COMMON_INCLUDES) \
		source/jrd/license.h
lc_dos.o:	lc_dos.c	$(COMMON_INCLUDES) \
		nordan40.h swedfin.h intl.h	   \
		db437de0.h db437es1.h db437fi0.h db437fr0.h \
		db437it0.h db437nl0.h db437sv0.h db437uk0.h \
		db437us0.h db850cf0.h db850de0.h db850es0.h \
		db850fr0.h db850it1.h db850nl0.h db850pt0.h \
		db850sv1.h db850uk0.h db850us0.h db865da0.h \
		db865no0.h db852cz0.h db852po0.h db852hdc.h \
		db852sl0.h czech.h polish.h hun852dc.h	\
		slovene.h db857tr0.h turk.h db860pt0.h	\
		iceland.h db863cf1.h db866ru0.h cyrr.h
lc_gb2312.o:	lc_gb2312.c	$(COMMON_INCLUDES) \
		source/jrd/license.h
lc_jis.o:	lc_jis.c	$(COMMON_INCLUDES) \
		source/jrd/license.h
lc_ksc.o:	lc_ksc.c	$(COMMON_INCLUDES) \
		source/jrd/license.h
lc_latin1.o:	lc_latin1.c	$(COMMON_INCLUDES) \
		bllt1ca0.h bllt1da0.h bllt1de0.h bllt1es0.h \
		bllt1fi0.h bllt1fr0.h bllt1is0.h bllt1it0.h \
		bllt1nl0.h bllt1no0.h bllt1pt0.h bllt1sv0.h \
		bllt1uk0.h bllt1us0.h anczech.h anhundc.h   \
		anpolish.h ansislov.h ancyrr.h ansiintl.h   \
		ansii850.h ansinor4.h ansispan.h ansiswfn.h \
		angreek1.h anturk.h blnxtus0.h blnxtde0.h   \
		blnxtfr0.h blnxtit0.h
lc_narrow.o:	lc_narrow.c	$(COMMON_INCLUDES)
lc_unicode.o:	lc_unicode.c	$(COMMON_INCLUDES)
ld.o:		ld.c		$(COMMON_INCLUDES)
ld2.o:		ld2.c		$(COMMON_INCLUDES)

cs_big5.bin:	cs_big5.o
	$(CP) cs_big5.c cs_big5foo.c
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) cs_big5foo.c
	$(MV) cs_big5foo.o cs_big5.bin
	-$(RM) cs_big5foo.c cs_big5foo.o
cs_gb2312.bin:	cs_gb2312.o
	$(CP) cs_gb2312.c cs_gb2312foo.c
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) cs_gb2312foo.c
	$(MV) cs_gb2312foo.o cs_gb2312.bin
	-$(RM) cs_gb2312foo.c cs_gb2312foo.o
cs_jis.bin:	cs_jis.o
	$(CP) cs_jis.c cs_jisfoo.c
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) cs_jisfoo.c
	$(MV) cs_jisfoo.o cs_jis.bin
	-$(RM) cs_jisfoo.c cs_jisfoo.o
cs_ksc.bin:	cs_ksc.o
	$(CP) cs_ksc.c cs_kscfoo.c
	$(SPECIAL_OPT) $(COPT_INTL_CS_JIS) \
	$(CC) -c $(INTL_PIC_FLAGS) $(VERSION_FLAG) cs_kscfoo.c
	$(MV) cs_kscfoo.o cs_ksc.bin
	-$(RM) cs_kscfoo.c cs_kscfoo.o
cs_narrow.bin:	cs_narrow.o
cs_unicode.bin:	cs_unicode.o
cs_utffss.bin:	cs_utffss.o
cv_big5.bin:	cv_big5.o
cv_gb2312.bin:	cv_gb2312.o
cv_jis.bin:	cv_jis.o
cv_ksc.bin:	cv_ksc.o
cv_narrow.bin:	cv_narrow.o
lc_ascii.bin:	lc_ascii.o
lc_big5.bin:	lc_big5.o
lc_dos.bin:	lc_dos.o
lc_gb2312.bin:	lc_gb2312.o
lc_jis.bin:	lc_jis.o
lc_ksc.bin:	lc_ksc.o
lc_narrow.bin:	lc_narrow.o
lc_latin1.bin:	lc_latin1.o
lc_unicode.bin:	lc_unicode.o
ld.bin:		ld.o
ld2.bin: 	ld2.o


clean:
	-$(RM) *.o
	-$(RM) *.bin
	-$(RM) dtest
	-$(RM) a.out
	-$(RM) $(INTL_SHLIBS)
	-$(RM) intl_*
	-$(RM) intl

# This entry is used to programatically update the include file dependancies 
# for all *.c files in the current directory.
#
# Note that it is specific to Solaris by using the -xM1 compiler option.
# This option has CC generate dependancy lines for the makefile - but
# does not generate object files.
# It is likely that a similar option exists on other platforms.
#
# It is recommended that depends.mak be created on a platform
# that supports such an option.  depends.mak is not platform dependant, it uses
# the standard makefile output format, as can be copied to platforms
# that don't have a -xM1 feature in the c compiler.
#
depends.mak: 
	-$(RM) depends.out
	-$(CC) $(CFLAGS) -xM1 *.c 1>&2 > depends.out
	-$(RM) depends.mak
	$(ECHO) "# depends.mak - intl"                           > depends.mak
	$(ECHO) "# Created by 'make depends.mak'"               >> depends.mak
	date "+# Created on %Y-%m-%d"                           >> depends.mak
	sed -e "s:source/[a-z/]*/source:source:g" \
	    -e "s:source/intl/::g" \
		depends.out |sort|uniq >> depends.mak
	-$(RM) depends.out

# In the event that a platform does not support the make directive "include" - 
# concatenate "depends.mak" with the makefile.
#
include depends.mak

