# The contents of this file are subject to the Interbase Public
# License Version 1.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy
# of the License at http://www.Inprise.com/IPL.html
#
# Software distributed under the License is distributed on an
# "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
# or implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code was created by Inprise Corporation
# and its predecessors. Portions created by Inprise Corporation are
# Copyright (C) Inprise Corporation.
#
# All Rights Reserved.
# Contributor(s): ______________________________________.
:
#
#       Copyright (C) 1989 The Santa Cruz Operation Inc. All Rights Reserved
#       This Module contains Proprietary Information of
#       The Santa Cruz Operation Inc, and should be treated as Confidential.
#

#BEGIN_CM_SCRIPTLIB
#
# Standard CM script function library
# baselib v1.2
#

PATH=/bin:/usr/bin:/etc:.
LANG=english_us.ascii	# Used when scripts are internationalized.
export PATH LANG

TMPFILE=/tmp/tmp$$    # Define a temporary file for use if necessary.
TMPFILE1=/tmp/tmp1$$    # Define a temporary file for use if necessary.
TMPFILE2=/tmp/tmp2$$    # Define a temporary file for use if necessary.

# Define return values.
: ${OK=0} ${FAIL=1} ${STOP=10}
 
#
# Print an error message.
#
error() {
	echo "\nError: $*" >&2
	return 0
}
 
#
# Prompt for yes or no answer - returns non-zero for no.
#
getyn() {
	while	echo "$* (y/n) \c"
	do	read yn rest
		case $yn in
		[yY])	return $OK 			;;
		[nN])	return $FAIL			;;
		*)	error "Please answer y or n" 	;;
		esac
	done
	return 0
}
 
#
# prdrel: given a prd value, return the release number of that
# product in the variable PRDREL.
# Return 0 if release is sucessfully gotten, return 1 if
# the release cannot be gotten.
#
PRDREL1="Checking for requested release information..."
prdrel() {

    _pd="$1"
    [ -n "${_pd}" ] || return 1
    PRDREL=""
    # tmp file name
    _prtmp=/tmp/pr$$

    if [ -f /etc/perms/${_pd} ] 
    then
	PRDREL=`sed -n '/^#rel=/s///p'  /etc/perms/${_pd}` || return 1
    else
	# There is no permlist with <prd> as its name, so search for 
	# permlists looking for appropriate #prd=... entry.
	# Ignore update p'lists here.  This code handles products
	# with several p'lists, primarily the OS and DS.
	# Pipe thru sort -r to get the highest rel first, and
	# put results into temporary file. (Ideally would pipe
	# them into 'read PRDREL', but this doesn't work under sh.)
	echo "$PRDREL1"
	: >${_prtmp}		# Clear temporary file.
	for _ff in /etc/perms/*
	do
	    [ -f ${_ff} ] || continue	# Process regular files only
	    _p=
	    _u=
	    _r=
	    eval `sed -n  '/^#rel=/s//_r=/p
			   /^#upd=/s//_u=/p
			   /^#prd=/s//_p=/p
			   /^[A-Z]/q
			   ' ${_ff} `  2>/dev/null
	    # If permlist prd matches wanted one, and it is not an upd,
	    # use rel= value.
	    [ -z "${_u}" -a "${_p}" = "${_pd}" ] && {
		echo ${_r}
	    }
	done  | sort -r > ${_prtmp}  2>/dev/null

	[ -s ${_prtmp} ] && PRDREL=`sed 1q  ${_prtmp}`
	rm -f ${_prtmp}  2>/dev/null		# Clean up tmp file.
    fi

    # Check if PRDREL has been set, return 1 if not.
    [ -z "$PRDREL" ] && return 1
    return 0
}
 
#
#query the user for a responce.
#a simpler system than prompt, use prompt for
#more sophisticated uses.
#q or Q returns fail, anything else return ok.
#ARGS: <string>, string to print when asking for a responce
#$OK means expression has been resolved or answer is given 
#$FAIL means quit has been selected
#
respond() {
	while	echo "\n${*}\nRespond or enter q to quit: \c" 
	do	read answer
		case $answer in
		Q|q)	return $FAIL					;;
		"")	# on a return key return $OK
			answer="RETURNKEY"
			return $OK			;;
		*)	# on anything else return $OK
			return $OK					;;
		esac
	done
	return $OK
}
 
#
# SHOULD BE USED WITH EVERY INSTALLATION SCRIPT
#
# Set the variable $prdperm to  /etc/perms/$PRDVALUE or ./tmp/perms/$PRDVALUE
# If the permlist is found, the values for set, prd, ver, typ, rel,
# and upd are set from the permlist.
# Also determine the OS type, xenix or unix, and set systype accordingly.
#
# sets following information in exported variables
# OSREL: x.x.xy	OSTYPE: unix|xenix	OSBUS: isa|mc
# OSPRD: <prd value>	OSMCH: <os machine type>
# echo "OS Release: $OSREL	OS Type: $OSTYPE	OS Bus: $OSBUS"
# echo "OS PRD Value: $OSPRD	OS Machine Type: $OSMCH"
#
SETVARS1="Permlist not found"
SETVARS2="Failed to set values from"
SETVARS3="Incorrect prd value in"

# Variables set by setvars.
prdperm=
fixperm=fixperm
brand=brand
set=
prd=
typ=
rel=
ser=
upd=
systype=unknown

setvars() {

# Locate fixperm, brand, and the permlist.
	for _i in /etc ./tmp
	do
	    [ -f "$_i/fixperm" ] && fixperm=$_i/fixperm
	    [ -f "$_i/brand" ] && brand=$_i/brand
	    [ -f "$_i/perms/$PRDVALUE" ] && prdperm=$_i/perms/$PRDVALUE
	done

	[ "$prdperm" ] || {
		echo "Warning: $PRDVALUE $SETVARS1" >&2
		return 1
	}

# Get the operating system type:
	case `uname -r` in
		2.*)	systype=xenix
			;;
		3.*)	systype=unix
			;;
		*)	systype=unknown
			;;
	esac

#
# OS variables setting
# OSREL: x.x.xy		OSTYPE: unix|xenix	OSBUS: isa|mc
# OSPRD: <prdvalue>	OSMCH: os mch type
#
	OSTYPE=$systype
	case "$OSTYPE" in
		unix)
		eval `sed -n '/^#prd=/s/#//p
			/^#typ=/s/#//p
			/^#rel=/s/#//p' /etc/perms/rtsmd` > /dev/null 2>&1
			OSREL=$rel
			OSPRD=$prd
			OSMCH=$typ
			if [ -r /dev/mcapos ]
			then
				if grep mcapos /etc/perms/rtsmd > /dev/null 2>&1
				then
					OSBUS=mc
				fi
			else
				OSBUS=isa
			fi
		;;
		xenix)
		eval `sed -n '/^#prd=/s/#//p
			/^#typ=/s/#//p
			/^#rel=/s/#//p' /etc/perms/inst` > /dev/null 2>&1
			OSREL=$rel
			OSPRD=$prd
			OSMCH=$typ
			var=`expr $OSMCH : '.*\(..\)$'`
			if [ "$var" = "MC" -o "$var" = "PS" ]
			then
				OSBUS=mc
			else
				OSBUS=isa
			fi
		;;
		*)
			OSREL=unknown
			OSTYPE=unknown
			OSBUS=unknown
			OSPRD=unknown
			OSMCH=unknown
		;;
	esac

	export OSREL OSTYPE OSBUS OSPRD OSMCH
	# Clear these vars before they are used below.
	prd=
	rel=
	typ=
	
# Extract product info from the permlist.
	eval `sed -n '/^#set=/s/#//p
		/^#prd=/s/#//p
		/^#typ=/s/#//p
		/^#rel=/s/#//p
		/^#ser=/s/#//p
		/^#upd=/s/#//p' $prdperm` || echo "\n$SETVARS2 $prdperm" >&2

# Check the prd value read from the permlist for correctness.

	case "$prd" in
	    "$PRDVALUE")	return 0
				;;
		      *)	echo "\n$SETVARS3 $prdperm"  >&2
				return 1
				;;
	esac

	return 0
}
 
#
# tarcomp:  Determines whether the system 'tar' is capable of decompressing.
# files automatically.  The command tar is used unless another is
# specified in the variable TARPROG.
# Returns 'true' (0) if the tar program can decompress, 'fail' if it cannot.
#
tarcomp() {

    # Set TARPROG to default of tar if not set.
    : ${TARPROG:=tar}
    tctmp=/tmp/tc$$		# Name for tmp files.

    # Eminently compressible data to go into file. (60 'a's)
    _ptrn="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

    echo ${_ptrn} | compress -F > $tctmp.A	# Compress data.

    # Tar to an archive file, with headers set to indicate compression.
    ${TARPROG} Cf $tctmp.T  $tctmp.A  2>/dev/null || {
	rm -rf $tctmp.* 
	return 1
    }

    # Now restore original file from archive - it should automagically
    # be decompressed.
    rm -f $tctmp.A
    ${TARPROG} xf $tctmp.T  2>/dev/null  || {
	rm -rf $tctmp.*
	return 1
    }

    # Compare it to the original data.
    echo ${_ptrn} | cmp -s - $tctmp.A  2>/dev/null || {
	rm -rf $tctmp.*
	return 1
    }

    # If we got here, the two compared equal, which
    # implies that the compress/decompress cycle worked.
    rm -rf $tctmp.*
    return 0
}
 
#
# Standard CM script function library
# configlib V1.0
# Contains: baselib, specificlib
#
 
#
# Standard CM script function library
# specificlib v1.4
# contains: baselib
#
 
#END_CM_SCRIPTLIB

# Check the installation status of the product with prd=$PRDVALUE
preinst_check() {
    echo " "
    fixperm -i /etc/perms/$PRDVALUE >/dev/null 2>&1
    case $? in
	0)      #Product/Package is fully installed
		echo "The Product $PRDVALUE is fully installed."
		echo "Reinstallation is not supported."
		echo "Suggest you remove the product before continuing."
		getyn "Abort the installation at this time ?" && {
			exit 1
		}
		break
		;;
	3)	#Product/Package does not exist
		break
		;;
	4)      #Product/Package is not installed
		break
		;;
	5)	#Product/Package is partially installed
		echo "The Product $PRDVALUE is partially installed."
		echo "Reinstallation is not supported."
		echo "Suggest you remove the product before continuing."
		getyn "Abort the installation at this time ?" && {
			exit 1
		}
		break
		;;
	*)      error "$PRDVALUE : Unknown installation state"
		return 1
		;;
    esac

    return 0
}

#MAIN

PRDVALUE=intrbase
export PRDVALUE

# get permlist information
setvars

# print special info from setvars
echo " "
echo "OS PRD Value: $OSPRD	OS Release: $OSREL"
echo "OS System Type: $OSTYPE	OS Bus: $OSBUS	OS Machine Type: $OSMCH"

# get info using prdrel
echo " "
case $OSTYPE in
	xenix)
		prdrel xos || error "Unable to get prd info on xos"
		echo "For prd value: xos, release level is: $PRDREL"
	;;
	unix)
		prdrel unixos || error "Unable to get prd info on unixos"
		echo "For prd value: unixos, release level is: $PRDREL"
	;;
	*)
		error "Unknown OS Type, unable to use prdrel"
	;;
esac

case $OSREL in
	
	3.2.1*|3.2.0*|3.2.2*|3.2.3*) 
			echo "ERROR:	This version of the operating";
			echo "		system does NOT support symbolic";
			echo "		links.";
			echo "		Aborting installation...";
			exit 1;;
	*)	:;; # Assume any other release has symlinks

esac
	


# check if tar compression is supported
echo " "
if tarcomp
then
	: # echo "This system supports products that use tar compression."
else
	echo "ERROR:	This system does not support software"
	echo "        	that has been cut using tar compression."
	echo "		Aborting installation..."
	exit 1
fi

# Check installation status of product $PRDVALUE
preinst_check || {
	echo "There has been an error in the prep script."
	echo "Aborting installation..."
	exit 1
}
exit 0
